#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose=require('mongoose');
const app = require('../app');
const  fileApp = require('../file-system/fileApp');
const debug = require('debug')('api:server');
const http = require('http');



/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
const filePort = normalizePort(process.env.PORT || '8081');
app.set('port', port);
app.set('port', filePort);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const fileServer = http.createServer(fileApp);

/**
 * Listen on provided port, on all network interfaces.
 */

mongoose.connect('mongodb://localhost/v1',{useNewUrlParser:true,useUnifiedTopology:true,useCreateIndex:true,useFindAndModify:false},(err,db) => {
  if (!err){
    console.log('Successfully Connected in MongoDB');
  } else {

    console.log('Syntax Error: ' + err);
  }});

mongoose.Promise=global.Promise;
mongooseDB=mongoose.connection;
mongooseDB.on('error',console.error.bind(console,'connection error'));

server.listen(port);
fileServer.listen(filePort);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error) {
    case 'EACCES':
      console.error.bind(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case error.code:
      console.error.bind(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}



/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports=server;
